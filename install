# kubernetes-dashboard
#menggunakan kops
#domain terlebih dahulu
#s3 bucket 
==========
#cek ns domain
dig ns (..)
======install awscli=====
sudo apt-get update
sudo apt-get install awscli
aws configure
======install kubectl=====
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
======install kops========
curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops
=======expose env dari s3===========
export KOPS_STATE_STORE=s3://(....)
=======membuat cluster=========
kops create cluster --node-count=3 --node-size=t2.micro --master-size=t2.micro --zones=(...) --name kubernetes.(...)
=======optional apabila error===========
ssh-keygen -t rsa
kops create secret --name kubernetes.wahiddin.my.id sshpublickey admin -i ~/.ssh/id_rsa.pub
========edit cluster============
kops edit cluster --name(..)
========buat ulang cluster error unauthorize=====
kops export kubecfg --admin 
========build cluster==========
kops update cluster (..) --yes --admin
======pointing ip(memasukan ip domain api)===========
sudo vim /etc/hosts
==========cek keberhasilan=========
kops validate cluster
=========download akses dashboard========
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml
==========kubectl port-forward kedalam local==========
kubectl port-forward -n kubernetes-dashboard service/kubernetes-dashboard 8080:443
scp -i wahidin-key.pem ubuntu@(server):~/.kube/config ~/.kube/ 
cp /home/ubuntu/.kube/config /var/lib/jenkins/.kube/
========akses ke dashboard=======
https://localhost:8080
========kubernetes dashboard access=========
#create service account
kubectl create serviceaccount k8sadmin -n kube-system
#Create a ClusterRoleBinding with Cluster Admin Privileges
kubectl create clusterrolebinding k8sadmin --clusterrole=cluster-admin --serviceaccount=kube-system:k8sadmin
=======get a token==========
kubectl get secret -n kube-system | grep k8sadmin | cut -d " " -f1 | xargs -n 1 | xargs kubectl get secret  -o 'jsonpath={.data.token}' -n kube-system | base64 --decode
=======delete kops cluster==============
kops delete cluster --name=namacluster  --state=s3://namabucket --yes
